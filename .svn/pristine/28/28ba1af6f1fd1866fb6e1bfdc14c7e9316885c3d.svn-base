package com.czmz.mqtt.appHandle.controller;

import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.czmz.mqtt.appHandle.entity.*;
import com.czmz.mqtt.common.JsonResult;
import com.czmz.mqtt.common.RedisUtil;
import com.czmz.mqtt.config.JwtConfig;
import com.czmz.mqtt.deviceType.entity.DeviceTypeRecord;
import com.czmz.mqtt.deviceType.service.IDeviceTypeRecordService;
import com.czmz.mqtt.mqttHadnle.IMqttSender;
import com.czmz.mqtt.online.entity.OnlineRecord;
import com.czmz.mqtt.online.service.IOnlineRecordService;
import com.czmz.mqtt.published.entity.PublishedRecord;
import com.czmz.mqtt.published.service.IPublishedRecordService;
import com.czmz.mqtt.utils.PubUtils;
import io.jsonwebtoken.Claims;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.TemporalAdjusters;
import java.util.*;

@Api("APP")
@RestController
@RequestMapping("app")
public class AppHandleController {
    private final String TEMPERATURE="temperature";
    private final String ELECTRICITY="electricity";
    @Autowired
    private IPublishedRecordService iPublishedRecordService;
    @Autowired
    private IOnlineRecordService iOnlineRecordService;
    @Autowired
    private RedisUtil redisUtil;
    @Autowired
    private IDeviceTypeRecordService iDeviceTypeServeice;
    @Resource
    private JwtConfig jwtConfig ;
    private static final Logger logger = LoggerFactory.getLogger(AppHandleController.class);
    @Resource
    private IMqttSender iMqttSender;

    @ApiOperation("sendSwitch")
    @PostMapping("sendSwitch")
    JSONObject sendSwitch(@RequestBody SendInfo sendInfo,@RequestHeader("x-token") String token){
        Claims claims=jwtConfig.getTokenClaim(token);
        JSONObject userJSON= (JSONObject) JSONObject.parse(claims.getSubject());
        String topic=redisUtil.get("app_send_topic").toString();
        iMqttSender.senToMqtt(topic,PubUtils.str2Bytes(sendInfo.getMsg()));
        return JsonResult.success("success");
    }
    @ApiOperation("getElectricityNow")
    @GetMapping("getElectricityNow")
    JSONObject getElectricityNow(String clientId){
        Integer status=iOnlineRecordService.count(Wrappers.<OnlineRecord>lambdaQuery()
                .eq(OnlineRecord::getClientId,clientId));
        NowInfoRet nowInfoRet=new NowInfoRet();
        PublishedRecord eleRet=iPublishedRecordService.getRecordByFlag(LocalDate.now(),"electricity");
        if(!Objects.isNull(eleRet)){
            nowInfoRet.setElectricity(eleRet.getPayload());
        }
        PublishedRecord tempRet=iPublishedRecordService.getRecordByFlag(LocalDate.now(),"temperature");
        if(!Objects.isNull(tempRet)){
            nowInfoRet.setTemperature(tempRet.getPayload());
        }
        PublishedRecord publishedNow=iPublishedRecordService
                .getRecordByFlag(LocalDate.now(),"consumption");
        PublishedRecord publishedY=iPublishedRecordService
                .getRecordByFlag(LocalDate.now().minusDays(1),"consumption");
        PublishedRecord publishedYY=iPublishedRecordService
                .getRecordByFlag(LocalDate.now().minusDays(2),"consumption");
        JSONObject jsonObject=JSONObject.parseObject(publishedNow.getPayload());

        Double con=jsonObject.getDouble("consumption");
        jsonObject=JSONObject.parseObject(publishedY.getPayload());
        Double cony=jsonObject.getDouble("consumption");
        jsonObject=JSONObject.parseObject(publishedYY.getPayload());
        Double conyy=jsonObject.getDouble("consumption");
        JSONObject jsonRet=new JSONObject();
        jsonRet.put("consumption",con-cony);
        jsonRet.put("consumptionY",cony-conyy);
        nowInfoRet.setConsumption(jsonRet.toJSONString());
        nowInfoRet.setDeviceStatus(status);
        return JsonResult.success(nowInfoRet);
    }

    @ApiOperation("getColumnData")
    @GetMapping("getColumnData")
    JSONObject getColumnData(String date){
        List<Double> columnData=new ArrayList<>();
        List<LocalDateTime> categories=new ArrayList<>();
        Series series=new Series();
        LocalDate localDate=LocalDate.parse(date+"-01");
        int c=localDate.with(TemporalAdjusters.lastDayOfMonth()).getDayOfMonth();
        double temp=-1;
        for(int i=-1;i<=c;i++){
            LocalDate lDate=localDate.minusDays(-i);
            PublishedRecord published=iPublishedRecordService
                    .getRecordByFlag(lDate,"consumption");

            if(!Objects.isNull(published)){
                JSONObject json=JSONObject.parseObject(published.getPayload());
                if(temp==-1){
                    temp=json.getDouble("consumption");
                }else{
                    double cons=json.getDouble("consumption");
                    columnData.add(cons-temp);
                    temp=cons;
                    categories.add(published.getCreatedAt());
                }
            }
        }
        List<Series> seriesList=new ArrayList<>();
        series.setName("用电量");
        series.setData(columnData);
        seriesList.add(series);
        Map<String,Object> column=new HashMap<>();
        column.put("categories",categories);
        column.put("series",seriesList);
        Map<String,Object> ret=new HashMap<>();
        ret.put("column",column);
        return JsonResult.success(ret);
    }
    @ApiOperation("getLineData")
    @GetMapping("getLineData")
    JSONObject getLineData(String date){
        List<Double>temp1Date=new ArrayList<>();
        List<Double>temp2Date=new ArrayList<>();
        List<Double>temp3Date=new ArrayList<>();
        List<Double>temp4Date=new ArrayList<>();

        List<LocalDateTime>temperatureCate=new ArrayList<>();
        List<LocalDateTime>electricityCate=new ArrayList<>();

        List<Double>aVoltageDate=new ArrayList<>();
        List<Double>bVoltageDate=new ArrayList<>();
        List<Double>cVoltageDate=new ArrayList<>();
        List<Double>aElectricDate=new ArrayList<>();
        List<Double>bElectricDate=new ArrayList<>();
        List<Double>cElectricDate=new ArrayList<>();
        List<PublishedRecord> publishedRecords=iPublishedRecordService.getRecordsByFlag(date,TEMPERATURE);
        for(PublishedRecord p:publishedRecords){
            JSONObject payload=JSONObject.parseObject(p.getPayload());
            temperatureCate.add(p.getCreatedAt());
            temp1Date.add(payload.getDouble("temp1"));
            temp2Date.add(payload.getDouble("temp2"));
            temp3Date.add(payload.getDouble("temp3"));
            temp4Date.add(payload.getDouble("temp4"));
        }
        publishedRecords=iPublishedRecordService.getRecordsByFlag(date,ELECTRICITY);
        for(PublishedRecord p:publishedRecords){
            electricityCate.add(p.getCreatedAt());
            JSONObject payload=JSONObject.parseObject(p.getPayload());
            aVoltageDate.add(payload.getDouble("aVoltage"));
            bVoltageDate.add(payload.getDouble("bVoltage"));
            cVoltageDate.add(payload.getDouble("cVoltage"));
            aElectricDate.add(payload.getDouble("aCurrent"));
            bElectricDate.add(payload.getDouble("bCurrent"));
            cElectricDate.add(payload.getDouble("cCurrent"));
        }

        List<Series> tSeriesList=new ArrayList<>();
        ListJson temp=new ListJson();
        //温度1
        Series t1Series=new Series();
        t1Series.setName("入口温度");
        t1Series.setData(temp1Date);
        tSeriesList.add(t1Series);
        //温度2
        Series t2Series=new Series();
        t2Series.setName("出口温度");
        t2Series.setData(temp2Date);
        tSeriesList.add(t2Series);
        //温度3
        Series t3Series=new Series();
        t3Series.setName("线温1");
        t3Series.setData(temp3Date);
        tSeriesList.add(t3Series);
        //温度4
        Series t4Series=new Series();
        t4Series.setName("线温2");
        t4Series.setData(temp4Date);
        tSeriesList.add(t4Series);


        temp.setCategories(temperatureCate);
        temp.setSeries(tSeriesList);




        //电压
        List<Series> vSeriesList=new ArrayList<>();
        ListJson voltage=new ListJson();
        Series vASeries=new Series();
        vASeries.setName("a相电压");
        vASeries.setData(aVoltageDate);
        vSeriesList.add(vASeries);

        Series vBSeries=new Series();
        vBSeries.setName("b相电压");
        vBSeries.setData(bVoltageDate);
        vSeriesList.add(vBSeries);

        Series vCSeries=new Series();
        vCSeries.setName("c相电压");
        vCSeries.setData(cVoltageDate);
        vSeriesList.add(vCSeries);

        voltage.setSeries(vSeriesList);
        voltage.setCategories(electricityCate);
        ListJson electric=new ListJson();
        List<Series> eSeriesList=new ArrayList<>();

        Series eASeries=new Series();
        eASeries.setName("a相电流");
        eASeries.setData(aElectricDate);
        eSeriesList.add(eASeries);

        Series eBSeries=new Series();
        eBSeries.setName("b相电流");
        eBSeries.setData(bElectricDate);
        eSeriesList.add(eBSeries);

        Series eCSeries=new Series();
        eCSeries.setName("c相电流");
        eCSeries.setData(cElectricDate);
        eSeriesList.add(eCSeries);

        electric.setSeries(eSeriesList);
        electric.setCategories(electricityCate);
        Map<String,Object> ret=new HashMap<>();
        ret.put("voltage",voltage);
        ret.put("electric",electric);
        ret.put("temp",temp);
        return JsonResult.success(ret);
    }
    @ApiOperation("getVersion")
    @GetMapping("getVersion")
    JSONObject getVersion(String version){
        DeviceTypeRecord deviceType=iDeviceTypeServeice.getOne(Wrappers.<DeviceTypeRecord>lambdaQuery()
                .eq(DeviceTypeRecord::getName,"RTP_APP"));
        UpdateRet updateRet=new UpdateRet();
        if(!Objects.isNull(deviceType)){
            if(deviceType.getVersion().toString().equals(version)){
                updateRet.setUpdate(false);
            }else{
                updateRet.setUpdate(true);
                updateRet.setUrl(deviceType.getFirmwareUrl());
                updateRet.setNode(deviceType.getNode());
            }
        }
        return JsonResult.success(updateRet);
    }
    @ApiOperation("setVersion")
    @PostMapping("setVersion")
    JSONObject setVersion(String version,String updateUrl,String updateNode){
        if(StringUtils.isNotBlank(version)){
            redisUtil.set("app_version",version);
        }
        if(StringUtils.isNotBlank(updateUrl)){
            redisUtil.set("app_update",updateUrl);
        }
        if(StringUtils.isNotBlank(updateNode)){
            redisUtil.set("app_updateNode",updateNode);
        }
        return JsonResult.success("success");
    }
    @ApiOperation("setRedis")
    @PostMapping("setRedis")
    JSONObject setRedis(String key,String value){
        redisUtil.set(key,value);
        return JsonResult.success("success");
    }
}
