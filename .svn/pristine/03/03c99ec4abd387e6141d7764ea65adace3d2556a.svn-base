package com.czmz.mqtt.published.service.impl;

import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.czmz.mqtt.published.entity.PublishedRecord;
import com.czmz.mqtt.published.repository.PublishedRecordMapper;
import com.czmz.mqtt.published.service.IPublishedRecordService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.temporal.TemporalAdjusters;
import java.util.List;

/**
 * <p>
 *  服务实现类
 * </p>
 *
 * @author yjc
 * @since 2019-11-29
 */
@Service
public class PublishedRecordServiceImpl extends ServiceImpl<PublishedRecordMapper, PublishedRecord> implements IPublishedRecordService {
    @Autowired
    private PublishedRecordMapper publishedRecordMapper;

    @Override
    public List<PublishedRecord> getRecordsByFlag(String date, String flag) {
        if("consumption".equals(flag)){
            LocalDate localDate=LocalDate.parse(date+"-01");
            LocalDate lastDate=localDate.with(TemporalAdjusters.lastDayOfMonth());
            return publishedRecordMapper.selectList(Wrappers.<PublishedRecord>lambdaQuery()
                    .eq(PublishedRecord::getFlag,flag)
                    .ge(PublishedRecord::getCreatedAt, LocalDateTime.of(localDate, LocalTime.MIN))
                    .le(PublishedRecord::getCreatedAt,LocalDateTime.of(lastDate,LocalTime.MAX)));
        }else{
            return publishedRecordMapper.selectList(Wrappers.<PublishedRecord>lambdaQuery()
                    .eq(PublishedRecord::getFlag,flag)
                    .ge(PublishedRecord::getCreatedAt, LocalDateTime.of(LocalDate.parse(date), LocalTime.MIN))
                    .le(PublishedRecord::getCreatedAt,LocalDateTime.of(LocalDate.parse(date),LocalTime.MAX)));
        }
    }
    @Override
    public PublishedRecord getRecordByFlag(LocalDate date, String flag) {
        return publishedRecordMapper.selectOne(Wrappers.<PublishedRecord>lambdaQuery()
                .eq(PublishedRecord::getFlag,flag)
                .ge(PublishedRecord::getCreatedAt, LocalDateTime.of(date, LocalTime.MIN))
                .le(PublishedRecord::getCreatedAt,LocalDateTime.of(date,LocalTime.MAX))
                .orderByDesc(PublishedRecord::getCreatedAt)
                .last(" limit 1"));
    }
}
